// Generated by CoffeeScript 2.3.2
(function() {
  var indexOf = [].indexOf;

  window.IxMap = {};

  IxMap.Search = (function() {
    class Search {
      lookupFromSearchTerm(searchName) {
        this.searchName = searchName;
        return jQuery.getJSON(IxMap.Search.searchJson, (data) => {
          var exchange, j, len, results;
          jQuery(IxMap.Search.searchFieldId).val("Search").blur();
          results = [];
          for (j = 0, len = data.length; j < len; j++) {
            exchange = data[j];
            if (exchange.value === this.searchName) {
              results.push(jQuery(location).attr('href', `${exchange.url}`));
            } else {
              results.push(void 0);
            }
          }
          return results;
        });
      }

      constructor(map) {
        this.map = map;
        jQuery.getJSON(IxMap.Search.searchJson, (data) => {
          return jQuery(IxMap.Search.searchFieldId).autocomplete({
            position: {
              my: "right top+12",
              at: "right bottom"
            },
            source: data,
            select: (event, ui) => {
              return this.lookupFromSearchTerm(ui.item.value);
            }
          });
        });
        jQuery(IxMap.Search.searchFieldId).val("Search").focus(function() {
          jQuery(this).addClass("focus");
          jQuery("#nav .search-container").addClass("focus");
          if (jQuery(this).val() === "Search") {
            return jQuery(this).val("");
          }
        }).blur(function() {
          jQuery(this).removeClass("focus").val("Search");
          return jQuery("#nav .search-container").removeClass("focus");
        });
      }

    };

    Search.featuresJson = '/api/v2/features.json';

    Search.searchJson = '/api/v2/search.json';

    Search.searchFieldId = '#search';

    Search.exchangeLatLons = [];

    return Search;

  }).call(this);

  IxMap.Map = (function() {
    class Map {
      static showAllExchanges() {
        var exchangeList;
        exchangeList = [];
        jQuery.getJSON(IxMap.Map.exchangesListJson, function(data) {
          var exchange, i, j, len, results;
          results = [];
          for (i = j = 0, len = data.length; j < len; i = ++j) {
            exchange = data[i];
            results.push(exchangeList.pushObject({
              id: i,
              name: exchange.value,
              slug: IxMap.Map.toSlug(exchange.value)
            }));
          }
          return results;
        });
        return exchangeList;
      }

      static toSlug(str) {
        return str.toLowerCase().replace(/[^-a-z0-9~\s\.:;+=_]/g, '').replace(/[\s\.:;=+]+/g, '-');
      }

      lookupExchangeForMap(searchName) {
        this.searchName = searchName;
        this.clearAllBuildings();
        return jQuery.getJSON(IxMap.Search.featuresJson, (data) => {
          var exchanges;
          exchanges = [];
          this.bounds(jQuery.map(data, (exchange, i) => {
            if (exchange.slug_name === this.searchName) {
              exchanges.push(exchange.building_id);
              return {
                latitude: exchange.latitude,
                longitude: exchange.longitude
              };
            }
          }));
          this.clearAllBuildings();
          this.showSearchBuildings(exchanges);
          return jQuery(IxMap.Search.searchFieldId).val("Search").blur();
        });
      }

      lookupCountryOrMetroAreaForMap(searchName, type = "country") {
        var building, buildingList, j, len, ref;
        this.searchName = searchName;
        this.clearAllBuildings();
        buildingList = [];
        ref = this.buildings;
        for (j = 0, len = ref.length; j < len; j++) {
          building = ref[j];
          if (building.geojsonProperties[type] === IxMap.Map.toSlug(this.searchName)) {
            building.setIcon({
              url: '/assets/images/markers.png',
              size: new google.maps.Size(22, 29),
              origin: new google.maps.Point(1166, 0)
            });
            this.setSearchResultMarkerEventListener(building);
            building.setMap(this.gmap);
            buildingList.push({
              map: this,
              building: building,
              letter: 0
            });
          }
        }
        this.bounds((function() {
          var k, len1, results;
          results = [];
          for (k = 0, len1 = buildingList.length; k < len1; k++) {
            building = buildingList[k];
            results.push({
              latitude: building.building.getPosition().lat(),
              longitude: building.building.getPosition().lng()
            });
          }
          return results;
        })());
        buildingList;
        return jQuery(IxMap.Search.searchFieldId).val("Search").blur();
      }

      lookupBuildingForMap(searchName) {
        var building, j, len, ref, results;
        this.searchName = searchName;
        this.infoBox.close();
        this.clearAllBuildings();
        this.showAllBuildings();
        ref = this.buildings;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          building = ref[j];
          if (building.geojsonProperties.building_id === parseInt(this.searchName, 10)) {
            this.selectBuildingFromList(building);
            if (this.gmap.getZoom() < 12) {
              results.push(this.gmap.setZoom(IxMap.Map.buildingZoomLevel));
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      }

      showAllExchanges() {
        if (!this.exchangeList) {
          this.exchangeList = [];
        }
        jQuery.getJSON(IxMap.Map.exchangesListJson, (data) => {
          var exchange, i, j, len, results;
          results = [];
          for (i = j = 0, len = data.length; j < len; i = ++j) {
            exchange = data[i];
            results.push(this.exchangeList.pushObject({
              id: i,
              name: exchange.value
            }));
          }
          return results;
        });
        return this.exchangeList;
      }

      selectBuildingFromList(building, color = 'blue') {
        var addr, infoMarkup, j, len, ref;
        this.infoBox.close();
        jQuery(location).attr('href', `/#/building/${building.geojsonProperties.building_id}`);
        infoMarkup = jQuery('<div/>').addClass(`${color}-info-box-content`).append(jQuery('<div/>').addClass(`${color}-info-box-pointer`));
        this.gmap.panTo(building.position);
        ref = building.geojsonProperties.address;
        for (j = 0, len = ref.length; j < len; j++) {
          addr = ref[j];
          infoMarkup.append(jQuery("<div/>").text(addr));
        }
        this.infoBox.setContent(jQuery('<div/>').append(infoMarkup).html());
        this.infoBox.setPosition(building.position);
        return this.infoBox.open(this.gmap);
      }

      highlightExchangeBuildingFromList(buildingId, color = 'red') {
        var addr, building, infoMarkup, j, k, len, len1, ref, ref1, results;
        ref = this.buildings;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          building = ref[j];
          if (building.geojsonProperties.building_id === parseInt(buildingId, 10)) {
            this.infoBox.close();
            infoMarkup = jQuery('<div/>').addClass(`${color}-info-box-content`).append(jQuery('<div/>').addClass(`${color}-info-box-pointer`));
            ref1 = building.geojsonProperties.address;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              addr = ref1[k];
              infoMarkup.append(jQuery("<div/>").text(addr));
            }
            this.infoBox.setContent(jQuery('<div/>').append(infoMarkup).html());
            this.infoBox.setPosition(building.position);
            results.push(this.infoBox.open(this.gmap));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }

      highlightExchangeBuilding(building, color = 'red') {
        var addr, infoMarkup, j, len, ref;
        this.infoBox.close();
        infoMarkup = jQuery('<div/>').addClass(`${color}-info-box-content`).append(jQuery('<div/>').addClass(`${color}-info-box-pointer`));
        ref = building.geojsonProperties.address;
        for (j = 0, len = ref.length; j < len; j++) {
          addr = ref[j];
          infoMarkup.append(jQuery("<div/>").text(addr));
        }
        this.infoBox.setContent(jQuery('<div/>').append(infoMarkup).html());
        this.infoBox.setPosition(building.position);
        return this.infoBox.open(this.gmap);
      }

      clearAllBuildings() {
        var building, j, len, ref, results;
        this.infoBox.close();
        ref = this.buildings;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          building = ref[j];
          google.maps.event.clearInstanceListeners(building);
          building.setIcon(IxMap.Map.iconObj);
          results.push(building.setMap(null));
        }
        return results;
      }

      onClickMapEvent() {
        return google.maps.event.addListener(this.gmap, 'click', (event) => {
          var building, j, len, ref;
          this.infoBox.close();
          this.clearAllBuildings();
          ref = this.buildings;
          for (j = 0, len = ref.length; j < len; j++) {
            building = ref[j];
            this.setMarkerEventListener(building);
            building.setMap(this.gmap);
          }
          return jQuery(location).attr('href', '/#/');
        });
      }

      setMarkerEventListener(building) {
        return google.maps.event.addListener(building, 'click', (event) => {
          return this.selectBuildingFromList(building);
        });
      }

      setSearchResultMarkerEventListener(building) {
        google.maps.event.addListener(building, 'mouseover', (event) => {
          return this.highlightExchangeBuilding(building, 'red');
        });
        google.maps.event.addListener(building, 'mouseout', (event) => {
          return this.infoBox.close();
        });
        return google.maps.event.addListener(building, 'click', (event) => {
          google.maps.event.clearListeners(building, 'mouseout');
          return this.selectBuildingFromList(building, 'red');
        });
      }

      showSearchBuildings(exchange) {
        var building, buildingList, included, j, len, ref, ref1, x;
        this.clearAllBuildings();
        buildingList = [];
        x = 0;
        ref = this.buildings;
        for (j = 0, len = ref.length; j < len; j++) {
          building = ref[j];
          if (included = (ref1 = building.geojsonProperties.building_id, indexOf.call(exchange, ref1) >= 0)) {
            if ((x + 1) * 22 > 1166) {
              building.setIcon({
                url: '/assets/images/markers.png',
                size: new google.maps.Size(22, 29),
                origin: new google.maps.Point(1166, 0)
              });
            } else {
              building.setIcon({
                url: '/assets/images/markers.png',
                size: new google.maps.Size(22, 29),
                origin: new google.maps.Point((x + 1) * 22, 0)
              });
            }
            this.setSearchResultMarkerEventListener(building);
            building.setMap(this.gmap);
            buildingList.push({
              map: this,
              building: building,
              letter: x
            });
            x++;
          }
        }
        return buildingList;
      }

      showAllBuildings() {
        var building, j, len, ref, results;
        this.clearAllBuildings();
        ref = this.buildings;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          building = ref[j];
          this.setMarkerEventListener(building);
          building.setIcon(IxMap.Map.iconObj);
          results.push(building.setMap(this.gmap));
        }
        return results;
      }

      bounds(exchangeLatLons) {
        var cableBounds, j, len, point;
        if (exchangeLatLons.length > 1) {
          cableBounds = new google.maps.LatLngBounds();
          for (j = 0, len = exchangeLatLons.length; j < len; j++) {
            point = exchangeLatLons[j];
            cableBounds.extend(new google.maps.LatLng(point.latitude, point.longitude));
          }
          return this.gmap.fitBounds(cableBounds);
        } else {
          this.gmap.setCenter(new google.maps.LatLng(exchangeLatLons[0].latitude, exchangeLatLons[0].longitude));
          return this.gmap.setZoom(10);
        }
      }

      constructor(element, center, zoom, buildings) {
        this.element = element;
        this.center = center;
        this.zoom = zoom;
        this.buildings = buildings;
        this.gmap = new google.maps.Map(document.getElementById(this.element), {
          zoom: this.zoom,
          streetViewControl: false,
          mapTypeControl: false,
          maxZoom: 20,
          minZoom: 2,
          styles: [
            {
              featureType: "all",
              elementType: "all",
              stylers: [
                {
                  "gamma": 1.7
                }
              ]
            }
          ],
          center: this.center,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        });
        this.infoBox = new InfoBox({
          closeBoxURL: "",
          alignBottom: true,
          pixelOffset: new google.maps.Size(-60, -45)
        });
        this.search = new IxMap.Search(this);
        this.showAllBuildings();
        this.onClickMapEvent();
        return this;
      }

    };

    Map.informationMarkupId = "#information";

    Map.markerPath = '/assets/images/markers.png';

    Map.buildingsGeojson = '/api/v2/buildings.geojson';

    Map.exchangesListJson = '/api/v2/exchanges.json';

    Map.alphabet = "abcdefghijklmnopqrstuvwxyz".split("");

    Map.iconObj = {
      url: '/assets/images/markers.png',
      size: new google.maps.Size(22, 29),
      origin: new google.maps.Point(0, 0)
    };

    Map.buildingZoomLevel = 12;

    return Map;

  }).call(this);

}).call(this);
